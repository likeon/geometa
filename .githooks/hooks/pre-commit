#!/bin/bash

# Git Pre-Commit Hook Dispatcher
# Routes to appropriate app hooks based on changed files

set -e

# Find the repository root and githooks directory
REPO_ROOT="$(git rev-parse --show-toplevel)"
GITHOOKS_DIR="$REPO_ROOT/.githooks"

# Ensure githooks directory exists
if [ ! -d "$GITHOOKS_DIR" ]; then
    echo "‚ùå Error: .githooks directory not found at $GITHOOKS_DIR"
    echo "Please run .githooks/setup.sh to configure git hooks"
    exit 1
fi

# Source helper libraries
source "$GITHOOKS_DIR/lib/utils.sh"
source "$GITHOOKS_DIR/lib/detect-changes.sh"
source "$GITHOOKS_DIR/lib/run-app-hooks.sh"

# Check if hooks should be skipped
if should_skip_hooks; then
    exit 0
fi

# Main execution
main() {
    print_info "üöÄ Running pre-commit hooks..."
    
    # Get list of staged files
    local staged_files=$(get_staged_files)
    
    if [ -z "$staged_files" ]; then
        print_info "No staged files found. Skipping hooks."
        exit 0
    fi
    
    # Show statistics about staged files
    local file_count=$(echo "$staged_files" | wc -l)
    print_info "Found $file_count staged file(s)"
    
    # Detect which apps have changes
    local changed_apps=$(detect_changed_apps "$staged_files")
    
    if [ -z "$changed_apps" ]; then
        print_info "No app-specific changes detected. Skipping hooks."
        exit 0
    fi
    
    print_info "Detected changes in: $changed_apps"
    
    # Show detailed change information if verbose
    if [ "${VERBOSE:-false}" = "true" ]; then
        for app in $changed_apps; do
            get_app_changes "$app" "$staged_files"
        done
    fi
    
    # Set hook type for execution engine
    export HOOK_TYPE="pre-commit"
    
    # Run hooks for changed apps
    if run_app_hooks $changed_apps; then
        print_success "‚úÖ All pre-commit hooks passed!"
        exit 0
    else
        print_error "‚ùå Pre-commit hooks failed!"
        print_info "To bypass hooks (use with caution): git commit --no-verify"
        print_info "To see more details: VERBOSE=true git commit"
        exit 1
    fi
}

# Handle errors
error_handler() {
    local line_no=$1
    local exit_code=$2
    print_error "Error on line $line_no with exit code $exit_code"
    print_info "If you continue to have issues, please check:"
    print_info "  1. All required tools are installed (node, bun, cargo)"
    print_info "  2. Dependencies are up to date (npm install, bun install, etc.)"
    print_info "  3. The .githooks/README.md for troubleshooting"
    exit $exit_code
}

# Set up error handling
trap 'error_handler ${LINENO} $?' ERR

# Run main function
main "$@"